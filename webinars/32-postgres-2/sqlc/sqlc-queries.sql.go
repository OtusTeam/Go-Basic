// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sqlc-queries.sql

package sqlc

import (
	"context"
)

const addUser = `-- name: AddUser :exec
insert into users(name) values ($1)
`

func (q *Queries) AddUser(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, addUser, name)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, name from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserDevicesCount = `-- name: GetUserDevicesCount :many
select users.name, devices.name as deviceName, count(devices.name)
from users
join devices on devices.user_id = users.id
where devices.attributes @> $1
group by users.name, devices.name
having count(devices.name)  > $2
`

type GetUserDevicesCountParams struct {
	Attributes []byte
	Name       string
}

type GetUserDevicesCountRow struct {
	Name       string
	Devicename string
	Count      int64
}

func (q *Queries) GetUserDevicesCount(ctx context.Context, arg GetUserDevicesCountParams) ([]GetUserDevicesCountRow, error) {
	rows, err := q.db.Query(ctx, getUserDevicesCount, arg.Attributes, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserDevicesCountRow
	for rows.Next() {
		var i GetUserDevicesCountRow
		if err := rows.Scan(&i.Name, &i.Devicename, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
